package reflect

import (
	"reflect"
)

var MakeFunc = reflect.ValueOf(reflect.MakeFunc)
var Swapper = reflect.ValueOf(reflect.Swapper)
var AppendSlice = reflect.ValueOf(reflect.AppendSlice)
var Indirect = reflect.ValueOf(reflect.Indirect)
var MakeSlice = reflect.ValueOf(reflect.MakeSlice)
var Zero = reflect.ValueOf(reflect.Zero)
var MakeMap = reflect.ValueOf(reflect.MakeMap)
var MakeMapWithSize = reflect.ValueOf(reflect.MakeMapWithSize)
var Select = reflect.ValueOf(reflect.Select)
var NewAt = reflect.ValueOf(reflect.NewAt)
var ValueOf = reflect.ValueOf(reflect.ValueOf)
var MakeChan = reflect.ValueOf(reflect.MakeChan)
var New = reflect.ValueOf(reflect.New)
var Append = reflect.ValueOf(reflect.Append)
var Copy = reflect.ValueOf(reflect.Copy)
var FuncOf = reflect.ValueOf(reflect.FuncOf)
var ArrayOf = reflect.ValueOf(reflect.ArrayOf)
var MapOf = reflect.ValueOf(reflect.MapOf)
var SliceOf = reflect.ValueOf(reflect.SliceOf)
var ChanOf = reflect.ValueOf(reflect.ChanOf)
var StructOf = reflect.ValueOf(reflect.StructOf)
var TypeOf = reflect.ValueOf(reflect.TypeOf)
var PtrTo = reflect.ValueOf(reflect.PtrTo)
var DeepEqual = reflect.ValueOf(reflect.DeepEqual)
