package bits

import (
	"math/bits"
	"reflect"
)

var OnesCount64 = reflect.ValueOf(bits.OnesCount64)
var LeadingZeros64 = reflect.ValueOf(bits.LeadingZeros64)
var TrailingZeros8 = reflect.ValueOf(bits.TrailingZeros8)
var TrailingZeros16 = reflect.ValueOf(bits.TrailingZeros16)
var TrailingZeros32 = reflect.ValueOf(bits.TrailingZeros32)
var OnesCount16 = reflect.ValueOf(bits.OnesCount16)
var RotateLeft = reflect.ValueOf(bits.RotateLeft)
var Reverse8 = reflect.ValueOf(bits.Reverse8)
var OnesCount = reflect.ValueOf(bits.OnesCount)
var RotateLeft32 = reflect.ValueOf(bits.RotateLeft32)
var ReverseBytes32 = reflect.ValueOf(bits.ReverseBytes32)
var Len = reflect.ValueOf(bits.Len)
var Len64 = reflect.ValueOf(bits.Len64)
var LeadingZeros8 = reflect.ValueOf(bits.LeadingZeros8)
var RotateLeft8 = reflect.ValueOf(bits.RotateLeft8)
var ReverseBytes16 = reflect.ValueOf(bits.ReverseBytes16)
var LeadingZeros = reflect.ValueOf(bits.LeadingZeros)
var LeadingZeros16 = reflect.ValueOf(bits.LeadingZeros16)
var LeadingZeros32 = reflect.ValueOf(bits.LeadingZeros32)
var TrailingZeros64 = reflect.ValueOf(bits.TrailingZeros64)
var Reverse = reflect.ValueOf(bits.Reverse)
var Reverse16 = reflect.ValueOf(bits.Reverse16)
var Reverse32 = reflect.ValueOf(bits.Reverse32)
var Reverse64 = reflect.ValueOf(bits.Reverse64)
var TrailingZeros = reflect.ValueOf(bits.TrailingZeros)
var OnesCount8 = reflect.ValueOf(bits.OnesCount8)
var RotateLeft64 = reflect.ValueOf(bits.RotateLeft64)
var ReverseBytes = reflect.ValueOf(bits.ReverseBytes)
var OnesCount32 = reflect.ValueOf(bits.OnesCount32)
var Len32 = reflect.ValueOf(bits.Len32)
var RotateLeft16 = reflect.ValueOf(bits.RotateLeft16)
var Len8 = reflect.ValueOf(bits.Len8)
var Len16 = reflect.ValueOf(bits.Len16)
var ReverseBytes64 = reflect.ValueOf(bits.ReverseBytes64)
