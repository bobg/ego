package strings

import (
	"reflect"
	"strings"
)

var LastIndex = reflect.ValueOf(strings.LastIndex)
var LastIndexByte = reflect.ValueOf(strings.LastIndexByte)
var Repeat = reflect.ValueOf(strings.Repeat)
var ToLowerSpecial = reflect.ValueOf(strings.ToLowerSpecial)
var ToTitle = reflect.ValueOf(strings.ToTitle)
var IndexRune = reflect.ValueOf(strings.IndexRune)
var SplitAfterN = reflect.ValueOf(strings.SplitAfterN)
var Split = reflect.ValueOf(strings.Split)
var Fields = reflect.ValueOf(strings.Fields)
var Join = reflect.ValueOf(strings.Join)
var HasPrefix = reflect.ValueOf(strings.HasPrefix)
var Replace = reflect.ValueOf(strings.Replace)
var EqualFold = reflect.ValueOf(strings.EqualFold)
var HasSuffix = reflect.ValueOf(strings.HasSuffix)
var ToLower = reflect.ValueOf(strings.ToLower)
var TrimFunc = reflect.ValueOf(strings.TrimFunc)
var Trim = reflect.ValueOf(strings.Trim)
var TrimPrefix = reflect.ValueOf(strings.TrimPrefix)
var LastIndexAny = reflect.ValueOf(strings.LastIndexAny)
var Map = reflect.ValueOf(strings.Map)
var ToTitleSpecial = reflect.ValueOf(strings.ToTitleSpecial)
var SplitAfter = reflect.ValueOf(strings.SplitAfter)
var ToUpper = reflect.ValueOf(strings.ToUpper)
var Title = reflect.ValueOf(strings.Title)
var TrimLeftFunc = reflect.ValueOf(strings.TrimLeftFunc)
var IndexFunc = reflect.ValueOf(strings.IndexFunc)
var LastIndexFunc = reflect.ValueOf(strings.LastIndexFunc)
var TrimSuffix = reflect.ValueOf(strings.TrimSuffix)
var TrimLeft = reflect.ValueOf(strings.TrimLeft)
var Contains = reflect.ValueOf(strings.Contains)
var ContainsAny = reflect.ValueOf(strings.ContainsAny)
var ContainsRune = reflect.ValueOf(strings.ContainsRune)
var FieldsFunc = reflect.ValueOf(strings.FieldsFunc)
var ToUpperSpecial = reflect.ValueOf(strings.ToUpperSpecial)
var TrimRight = reflect.ValueOf(strings.TrimRight)
var IndexAny = reflect.ValueOf(strings.IndexAny)
var SplitN = reflect.ValueOf(strings.SplitN)
var TrimRightFunc = reflect.ValueOf(strings.TrimRightFunc)
var TrimSpace = reflect.ValueOf(strings.TrimSpace)
var Index = reflect.ValueOf(strings.Index)
var Count = reflect.ValueOf(strings.Count)
var NewReplacer = reflect.ValueOf(strings.NewReplacer)
var Index = reflect.ValueOf(strings.Index)
var Count = reflect.ValueOf(strings.Count)
var Compare = reflect.ValueOf(strings.Compare)
var Index = reflect.ValueOf(strings.Index)
var Count = reflect.ValueOf(strings.Count)
var NewReader = reflect.ValueOf(strings.NewReader)
var IndexByte = reflect.ValueOf(strings.IndexByte)
