package bytes

import (
	"bytes"
	"reflect"
)

var Index = reflect.ValueOf(bytes.Index)
var Count = reflect.ValueOf(bytes.Count)
var NewBufferString = reflect.ValueOf(bytes.NewBufferString)
var NewBuffer = reflect.ValueOf(bytes.NewBuffer)
var Index = reflect.ValueOf(bytes.Index)
var Count = reflect.ValueOf(bytes.Count)
var IndexByte = reflect.ValueOf(bytes.IndexByte)
var Equal = reflect.ValueOf(bytes.Equal)
var Compare = reflect.ValueOf(bytes.Compare)
var Index = reflect.ValueOf(bytes.Index)
var Count = reflect.ValueOf(bytes.Count)
var IndexRune = reflect.ValueOf(bytes.IndexRune)
var Map = reflect.ValueOf(bytes.Map)
var TrimSuffix = reflect.ValueOf(bytes.TrimSuffix)
var LastIndexFunc = reflect.ValueOf(bytes.LastIndexFunc)
var EqualFold = reflect.ValueOf(bytes.EqualFold)
var FieldsFunc = reflect.ValueOf(bytes.FieldsFunc)
var ToUpperSpecial = reflect.ValueOf(bytes.ToUpperSpecial)
var ToLowerSpecial = reflect.ValueOf(bytes.ToLowerSpecial)
var TrimLeft = reflect.ValueOf(bytes.TrimLeft)
var ContainsRune = reflect.ValueOf(bytes.ContainsRune)
var SplitAfter = reflect.ValueOf(bytes.SplitAfter)
var Fields = reflect.ValueOf(bytes.Fields)
var Join = reflect.ValueOf(bytes.Join)
var TrimLeftFunc = reflect.ValueOf(bytes.TrimLeftFunc)
var TrimFunc = reflect.ValueOf(bytes.TrimFunc)
var Replace = reflect.ValueOf(bytes.Replace)
var TrimSpace = reflect.ValueOf(bytes.TrimSpace)
var LastIndex = reflect.ValueOf(bytes.LastIndex)
var ToUpper = reflect.ValueOf(bytes.ToUpper)
var ToTitleSpecial = reflect.ValueOf(bytes.ToTitleSpecial)
var TrimPrefix = reflect.ValueOf(bytes.TrimPrefix)
var IndexFunc = reflect.ValueOf(bytes.IndexFunc)
var Trim = reflect.ValueOf(bytes.Trim)
var ToLower = reflect.ValueOf(bytes.ToLower)
var ContainsAny = reflect.ValueOf(bytes.ContainsAny)
var LastIndexByte = reflect.ValueOf(bytes.LastIndexByte)
var LastIndexAny = reflect.ValueOf(bytes.LastIndexAny)
var SplitN = reflect.ValueOf(bytes.SplitN)
var Split = reflect.ValueOf(bytes.Split)
var HasPrefix = reflect.ValueOf(bytes.HasPrefix)
var HasSuffix = reflect.ValueOf(bytes.HasSuffix)
var Runes = reflect.ValueOf(bytes.Runes)
var Title = reflect.ValueOf(bytes.Title)
var Contains = reflect.ValueOf(bytes.Contains)
var IndexAny = reflect.ValueOf(bytes.IndexAny)
var SplitAfterN = reflect.ValueOf(bytes.SplitAfterN)
var Repeat = reflect.ValueOf(bytes.Repeat)
var ToTitle = reflect.ValueOf(bytes.ToTitle)
var TrimRightFunc = reflect.ValueOf(bytes.TrimRightFunc)
var TrimRight = reflect.ValueOf(bytes.TrimRight)
var NewReader = reflect.ValueOf(bytes.NewReader)
