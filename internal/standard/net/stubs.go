package net

import (
	"net"
	"reflect"
)

var DialTCP = reflect.ValueOf(net.DialTCP)
var ListenTCP = reflect.ValueOf(net.ListenTCP)
var ResolveTCPAddr = reflect.ValueOf(net.ResolveTCPAddr)
var ResolveUnixAddr = reflect.ValueOf(net.ResolveUnixAddr)
var DialUnix = reflect.ValueOf(net.DialUnix)
var ListenUnix = reflect.ValueOf(net.ListenUnix)
var ListenUnixgram = reflect.ValueOf(net.ListenUnixgram)
var IPv4 = reflect.ValueOf(net.IPv4)
var ParseIP = reflect.ValueOf(net.ParseIP)
var CIDRMask = reflect.ValueOf(net.CIDRMask)
var IPv4Mask = reflect.ValueOf(net.IPv4Mask)
var ParseCIDR = reflect.ValueOf(net.ParseCIDR)
var Dial = reflect.ValueOf(net.Dial)
var DialTimeout = reflect.ValueOf(net.DialTimeout)
var Listen = reflect.ValueOf(net.Listen)
var ListenPacket = reflect.ValueOf(net.ListenPacket)
var FileConn = reflect.ValueOf(net.FileConn)
var FileListener = reflect.ValueOf(net.FileListener)
var FilePacketConn = reflect.ValueOf(net.FilePacketConn)
var ResolveUDPAddr = reflect.ValueOf(net.ResolveUDPAddr)
var DialUDP = reflect.ValueOf(net.DialUDP)
var ListenUDP = reflect.ValueOf(net.ListenUDP)
var ListenMulticastUDP = reflect.ValueOf(net.ListenMulticastUDP)
var LookupNS = reflect.ValueOf(net.LookupNS)
var LookupTXT = reflect.ValueOf(net.LookupTXT)
var LookupHost = reflect.ValueOf(net.LookupHost)
var LookupIP = reflect.ValueOf(net.LookupIP)
var LookupMX = reflect.ValueOf(net.LookupMX)
var LookupCNAME = reflect.ValueOf(net.LookupCNAME)
var LookupAddr = reflect.ValueOf(net.LookupAddr)
var LookupPort = reflect.ValueOf(net.LookupPort)
var LookupSRV = reflect.ValueOf(net.LookupSRV)
var Pipe = reflect.ValueOf(net.Pipe)
var Interfaces = reflect.ValueOf(net.Interfaces)
var InterfaceAddrs = reflect.ValueOf(net.InterfaceAddrs)
var InterfaceByIndex = reflect.ValueOf(net.InterfaceByIndex)
var InterfaceByName = reflect.ValueOf(net.InterfaceByName)
var SplitHostPort = reflect.ValueOf(net.SplitHostPort)
var JoinHostPort = reflect.ValueOf(net.JoinHostPort)
var ParseMAC = reflect.ValueOf(net.ParseMAC)
var DialIP = reflect.ValueOf(net.DialIP)
var ListenIP = reflect.ValueOf(net.ListenIP)
var ResolveIPAddr = reflect.ValueOf(net.ResolveIPAddr)
