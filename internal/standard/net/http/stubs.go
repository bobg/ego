package http

import (
	"net/http"
	"reflect"
)

var ProxyFromEnvironment = reflect.ValueOf(http.ProxyFromEnvironment)
var ProxyURL = reflect.ValueOf(http.ProxyURL)
var Redirect = reflect.ValueOf(http.Redirect)
var ServeTLS = reflect.ValueOf(http.ServeTLS)
var NotFound = reflect.ValueOf(http.NotFound)
var Error = reflect.ValueOf(http.Error)
var Serve = reflect.ValueOf(http.Serve)
var NotFoundHandler = reflect.ValueOf(http.NotFoundHandler)
var StripPrefix = reflect.ValueOf(http.StripPrefix)
var RedirectHandler = reflect.ValueOf(http.RedirectHandler)
var ListenAndServeTLS = reflect.ValueOf(http.ListenAndServeTLS)
var HandleFunc = reflect.ValueOf(http.HandleFunc)
var Handle = reflect.ValueOf(http.Handle)
var TimeoutHandler = reflect.ValueOf(http.TimeoutHandler)
var ListenAndServe = reflect.ValueOf(http.ListenAndServe)
var NewServeMux = reflect.ValueOf(http.NewServeMux)
var SetCookie = reflect.ValueOf(http.SetCookie)
var StatusText = reflect.ValueOf(http.StatusText)
var ReadResponse = reflect.ValueOf(http.ReadResponse)
var NewRequest = reflect.ValueOf(http.NewRequest)
var ReadRequest = reflect.ValueOf(http.ReadRequest)
var MaxBytesReader = reflect.ValueOf(http.MaxBytesReader)
var ParseHTTPVersion = reflect.ValueOf(http.ParseHTTPVersion)
var Post = reflect.ValueOf(http.Post)
var Head = reflect.ValueOf(http.Head)
var Get = reflect.ValueOf(http.Get)
var PostForm = reflect.ValueOf(http.PostForm)
var NewFileTransport = reflect.ValueOf(http.NewFileTransport)
var FileServer = reflect.ValueOf(http.FileServer)
var ServeContent = reflect.ValueOf(http.ServeContent)
var ServeFile = reflect.ValueOf(http.ServeFile)
var CanonicalHeaderKey = reflect.ValueOf(http.CanonicalHeaderKey)
var ParseTime = reflect.ValueOf(http.ParseTime)
var DetectContentType = reflect.ValueOf(http.DetectContentType)
