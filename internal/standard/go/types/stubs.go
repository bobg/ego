package types

import (
	"go/types"
	"reflect"
)

var Id = reflect.ValueOf(types.Id)
var NewConst = reflect.ValueOf(types.NewConst)
var NewTypeName = reflect.ValueOf(types.NewTypeName)
var NewPkgName = reflect.ValueOf(types.NewPkgName)
var NewField = reflect.ValueOf(types.NewField)
var NewFunc = reflect.ValueOf(types.NewFunc)
var NewLabel = reflect.ValueOf(types.NewLabel)
var ObjectString = reflect.ValueOf(types.ObjectString)
var NewVar = reflect.ValueOf(types.NewVar)
var NewParam = reflect.ValueOf(types.NewParam)
var NewMethodSet = reflect.ValueOf(types.NewMethodSet)
var WriteSignature = reflect.ValueOf(types.WriteSignature)
var RelativeTo = reflect.ValueOf(types.RelativeTo)
var TypeString = reflect.ValueOf(types.TypeString)
var WriteType = reflect.ValueOf(types.WriteType)
var DefPredeclaredTestFuncs = reflect.ValueOf(types.DefPredeclaredTestFuncs)
var NewChecker = reflect.ValueOf(types.NewChecker)
var NewPackage = reflect.ValueOf(types.NewPackage)
var ExprString = reflect.ValueOf(types.ExprString)
var WriteExpr = reflect.ValueOf(types.WriteExpr)
var NewScope = reflect.ValueOf(types.NewScope)
var IsInterface = reflect.ValueOf(types.IsInterface)
var Comparable = reflect.ValueOf(types.Comparable)
var Identical = reflect.ValueOf(types.Identical)
var Default = reflect.ValueOf(types.Default)
var IdenticalIgnoreTags = reflect.ValueOf(types.IdenticalIgnoreTags)
var AssertableTo = reflect.ValueOf(types.AssertableTo)
var AssignableTo = reflect.ValueOf(types.AssignableTo)
var ConvertibleTo = reflect.ValueOf(types.ConvertibleTo)
var Implements = reflect.ValueOf(types.Implements)
var SizesFor = reflect.ValueOf(types.SizesFor)
var NewSlice = reflect.ValueOf(types.NewSlice)
var NewTuple = reflect.ValueOf(types.NewTuple)
var NewInterface = reflect.ValueOf(types.NewInterface)
var NewArray = reflect.ValueOf(types.NewArray)
var NewPointer = reflect.ValueOf(types.NewPointer)
var NewSignature = reflect.ValueOf(types.NewSignature)
var NewMap = reflect.ValueOf(types.NewMap)
var NewChan = reflect.ValueOf(types.NewChan)
var NewNamed = reflect.ValueOf(types.NewNamed)
var NewStruct = reflect.ValueOf(types.NewStruct)
var LookupFieldOrMethod = reflect.ValueOf(types.LookupFieldOrMethod)
var MissingMethod = reflect.ValueOf(types.MissingMethod)
var SelectionString = reflect.ValueOf(types.SelectionString)
var Eval = reflect.ValueOf(types.Eval)
